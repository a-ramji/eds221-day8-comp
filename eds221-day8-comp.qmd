---
title: "Day 8 Comp"
format: html
editor: visual
---

## 

## Reviewing basics of ggplot

## Setup

```{r}
# General use packages:
library(tidyverse)
library(here)
library(janitor)

# Specifically for plots:
library(patchwork)
library(ggrepel)
library(gghighlight)
library(paletteer)
library(ggExtra)
library(ggbeeswarm)

# And for another dataset we'll explore:
library(gapminder)

# Spatial
library(sf)

```

## Read in data

Lizards

Our data are a curated subset from [Jornada Basin Long Term Ecological Research site](https://lter.jornada.nmsu.edu/) in New Mexico, part of the US Long Term Ecological Research (LTER) network:

-   Lightfoot, D. and W.G. Whitford. 2020. Lizard pitfall trap data from 11 NPP study locations at the Jornada Basin LTER site, 1989-2006 ver 37. Environmental Data Initiative. <https://doi.org/10.6073/pasta/4a6e258fb49c31e222ecbbcfd128967f>

```{r}
lizards <- read_csv(here("data_tidy", "lizards.csv"))

#unique(lizards$common_name)
```

From the data package: "This data package contains data on lizards sampled by pitfall traps located at 11 consumer plots at Jornada Basin LTER site from 1989-2006. The objective of this study is to observe how shifts in vegetation resulting from desertification processes in the Chihuahaun desert have changed the spatial and temporal availability of resources for consumers. Desertification changes in the Jornada Basin include changes from grass to shrub dominated communities and major soil changes. If grassland systems respond to rainfall without significant lags, but shrub systems do not, then consumer species should reflect these differences. In addition, shifts from grassland to shrubland results in greater structural heterogeneity of the habitats. We hypothesized that consumer populations, diversity, and densities of some consumers will be higher in grasslands than in shrublands and will be related to the NPP of the sites. Lizards were captured in pitfall traps at the 11 LTER II/III consumer plots (a subset of NPP plots) quarterly for 2 weeks per quarter. Variables measured include species, sex, recapture status, snout-vent length, total length, weight, and whether tail is broken or whole. This study is complete."

There are 16 total variables in the `lizards.csv` data we'll read in. The ones we'll use in this workshop are:

-   `date`: data collection date
-   `scientific_name`: lizard scientific name
-   `common_name`: lizard common name
-   `site`: research site code
-   `sex`: lizard sex (m = male; f = female; j = juvenile)
-   `sv_length`: snout-vent length (millimeters)
-   `total_length`: body length (millimeters)
-   `toe_num`: toe mark number
-   `weight`: body weight (grams)
-   `tail`: tail condition (b = broken; w = whole)

## Code warmup:

### Data Wrangling

Do some data wrangling to create a new subset from lizards where you:

1.  limit the data to only contain western whiptails, colorado checkered, and eastern fence lizards.
2.  Add a new column with total length converted to centimeters
3.  group by species and site
4.  return a summary table with mean total length and standard deviation of total length by species and site

```{r}
wrangled_lizards <- lizards |> 
  filter(common_name %in% c("western whiptail", "colorado checkered", "eastern fence")) |> 
  mutate(total_length_cm = total_length * .1) |> 
  group_by(scientific_name, site) |> 
  summarize(mean_total_length_cm = mean(total_length_cm, na.rm = TRUE),
            sd_total_length_cm = sd(total_length_cm, na.rm = TRUE))

wrangled_lizards
```

## Jornada vegetation spatial data

From [Jornada Basin LTER Spatial Data](https://lter.jornada.nmsu.edu/spatial-data/): Dominant Vegetation of the JER and CDRRC in 1998 (Download KMZ 3972 KB) Dominant and subdominant vegetation on the Jornada Experimental Range and Chihuahuan Desert Rangeland Research Center in 1998. Published in Gibbens, R. P., McNeely, R. P., Havstad, K. M., Beck, R. F., & Nolen, B. (2005). Vegetation changes in the Jornada Basin from 1858 to 1998. Journal of Arid Environments, 61(4), 651-668.

# `ggplot2` Basics Review

First, we'll cover some `ggplot2` basics to create the foundation that we'll make our great customized data visualization on.

## The essentials

When we start creating a `ggplot` graph, we need three basic building blocks:

1.  We're using `ggplot`
2.  What data we want to use in our graph
3.  What type of graph we're creating

Length-weight relationship

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) + 
  geom_point(aes(color = common_name)) +
  theme_minimal()
```

Facet !!

wrapping

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) + 
  geom_point(aes(color = common_name)) +
  facet_wrap(~ common_name, scales = "free")
 # theme_minimal()
```

new(ish) dataset:

```{r}
# use dplyr::count to find the total number of lizards by common name in th elizards dataset

lizard_counts <- lizards |> 
  count(common_name)

# lizard_counts
  

```

### Bar chart (column chart) of counts

use geom_col()

```{r}
ggplot(data = lizard_counts, aes(x = common_name, y = n)) +
  geom_col()
```

```{r}
ggplot(data = lizard_counts, aes(y = common_name, x = n)) +
  geom_col()
```

Forcats for factors!!

?fct_reorder in console

?levels

levels(data\$variable)

```{r}
ggplot(data = lizard_counts, aes(y = fct_reorder(common_name, n), x = n)) +
  geom_col()
```

### Scales

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) + 
  geom_point(aes(color = weight)) +
  scale_y_continuous(limits = c(0, 100),
                     breaks = seq(from = 0, to = 100, by = 20),
                     expand = c(0,0)
                     ) +
  scale_color_gradient(low = "red", high = "navy")

```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) + 
  geom_point(aes(color = weight)) +
  scale_y_continuous(limits = c(0, 80),
                     breaks = seq(from = 0, to = 80, by = 20),
                     expand = c(0,0)
                     ) +
  scale_color_gradientn(colors = c("yellow", "orange", "blue", "purple"))
```

\-\-\-\-\-- afternoon session ------

```{r}
# view(gapminder) in console :)
```

Life expectancy vs GDP per capita

(basic)

```{r}
ggplot(data = gapminder, aes(x = lifeExp, y = gdpPercap)) +
  geom_point()
```

Add text annotation

```{r}
ggplot(data = gapminder, aes(x = lifeExp, y = gdpPercap)) +
  geom_point() +
  annotate("text", x = 40, y = 90000, label = "A label") +
  geom_hline(yintercept = 70000, linetype = "dotted", color = "purple") +
  geom_vline(xintercept = mean(gapminder$lifeExp))
```

```{r}
gapminder |> 
  filter(year == 2002, continent == "Europe") |> 
  ggplot(aes(x = gdpPercap, y = lifeExp)) +
  geom_point(shape = 23, size = 4, color = "purple", fill = "orange")
```

using geom_text_repel

```{r}
gapminder |> 
  filter(year == 2002, continent == "Europe") |> 
  ggplot(aes(x = gdpPercap, y = lifeExp)) +
  geom_point(shape = 23, size = 4, color = "purple", fill = "orange") +
  geom_text_repel(aes(label = country)) #ggrepel
```

using gghighlight

```{r}
gapminder |> 
  filter(year == 2002, continent == "Europe") |> 
  ggplot(aes(x = gdpPercap, y = lifeExp)) +
  geom_point() +
#  geom_text_repel(aes(label = country)) + #ggrepel 
  gghighlight(country == "Poland", label_key = country)
```

Create a ggplot chart using data only from 2007, then highlight all countries in Europe, adding their country name as a label

```{r}
gapminder |> 
  filter(year == 2007) |> 
  ggplot(aes(x = gdpPercap, y = lifeExp)) +
  geom_point() +
  geom_text_repel(aes(label = country)) +
  gghighlight(continent == "Europe", label_key = country)
```

```{r}
gapminder |> 
  filter(year == 2007) |> 
  ggplot(aes(x = gdpPercap, y = lifeExp)) +
  geom_point() +
  geom_text_repel(aes(label = country)) +
  gghighlight(continent == "Europe")
```

```{r}

```

using sf

```{r}
jornada_veg <- read_sf(here("data_raw", "spatial_vegetation", "doc.kml")) |> 
  select(name = Name)  
# you can use select() as a tool to rename columns!
# note that the output still contains the geometry (spatial component) column!
```

geometry column:

-   contains series of all of the different nodes that are used to create a polygon ssssss area in space ??

-   connect the dots drawing - style -- connect lines between to make a polygon

-   sequence of dots to connect to make a polygon

-   multiple polygons where the dominant vegetation type is \_\_\_ (in Name column)

### Data cleaning! (piped into chunk above as well)

Sticky geometries -- you can do all the wrangling you want with the other attributes and the geometry will stick to it (cool thing about sf)

```{r}
ggplot() +
  geom_sf(data = jornada_veg)
```

```{r}
ggplot() +
  geom_sf(data = jornada_veg, aes(fill = name), color = NA)
```

Use paleteer

view(palettes_d_names) in console (omg so many, so cool, ghibli!!!)

check how many colors you need by typing

length(unique(data\$variable))

in console

```{r}
ggplot() +
  geom_sf(data = jornada_veg, aes(fill = name), color = NA) +
  theme_minimal() +
  scale_fill_paletteer_d(palette = "ggthemes::manyeys")
```

```{r}
ggplot() +
  geom_sf(data = jornada_veg, aes(fill = name), color = NA) +
  theme_minimal() +
  scale_fill_paletteer_d(palette = "impressionist.colors::un_dimanche_apres_midi_a_l_ile_de_la_grande_jatte")
```

?theme in console

```{r}
ggplot() +
  geom_sf(data = jornada_veg, aes(fill = name), color = NA) +
  theme_minimal() +
  scale_fill_paletteer_d(palette = "ggthemes::manyeys") +
  theme(panel.background = element_rect(color = "purple", size = 5, fill = "pink"))
```

```{r}
ggplot() +
  geom_sf(data = jornada_veg, aes(fill = name), color = NA) +
  theme_minimal() +
  scale_fill_paletteer_d(palette = "ggthemes::manyeys") +
  theme(panel.background = element_rect(color = "purple", size = 5, fill = "pink"),
        plot.background = element_rect(fill = "yellow"),
        panel.grid = element_line(color = "magenta"))
```

```{r}
ggplot() +
  geom_sf(data = jornada_veg, aes(fill = name), color = NA) +
  theme_minimal() + # if we put this at the end, it would override all of our earlier theme changes! (its being overwritten by the lines after it currently)
  scale_fill_paletteer_d(palette = "ggthemes::manyeys") +
  theme(panel.background = element_rect(color = "purple", size = 5, fill = "pink"),
        plot.background = element_rect(fill = "yellow"),
        panel.grid.major = element_line(color = "magenta")
        # major and minor options for normal graphs that have both (ours only has major gridlines)
        ,
        axis.text.x = element_text(color = "red")
        )
```
